package graph;

import list.*;
import hashtable.*;

public class UWGraph {

  public DList vertexList;
  public HashTableChained edgeHash;

  public UWGraph() {
    vertexList = new DList();
    edgeHash = new HashTableChained();
  }

  public void insertVertex(Object s) {
    vertexList.insertBack(s);
  }

  public void insertEdge(Object s1, Object s2) {
    if (edgeHash.find(new VertexPair(s1, s2)) == null) {
      edgeHash.insert(new VertexPair(s1, s2), null);
    }
  }

  public boolean isEdge(Object v1, Object v2) {
    return !(edgeHash.find(new VertexPair(v1, v2)) == null); 
  }

  public String toString() {
    int max = edgeHash.size();
    int itemNum;
    String output = "";
    DListNode currNode1 = vertexList.front();
    try {
    while (currNode1.isValidNode()) {
      DListNode currNode2 = vertexList.front();
      while (currNode2.isValidNode()) {
	Entry item = edgeHash.find(new VertexPair(currNode1.item(), currNode2.item()));
	if (item != null) {
	  output += currNode1.item() + ", "  + currNode2.item() + ": " + "\n";
	}
	currNode2 = currNode2.next();
      }
      currNode1 = currNode1.next();
    }
    } catch (InvalidNodeException e) {
      System.out.println(e);
    }
    return output;
  }

}
