import java.util.Map;

import majors.MajorsParser;

public class Classes {
	
	public String myMajor;
	public Majors otherMajors;
	public Object[] unrelatedMajors;
	public String[] majorsWithCourses;
	
	public Classes(String major) {
		myMajor = major;
		otherMajors = new Majors();
		unrelatedMajors = new Object[5];
	}
	
	public void addDepths(int numMajors, double depth) {
		MajorsParser parser = new MajorsParser();
		Map<String, String[]> map = parser.parseMajors();
		otherMajors.addRelated(map);
		unrelatedMajors = otherMajors.relatedMajors.farVertices(myMajor, numMajors,depth);
	}
	
	public Course[][] coursesForMajor(Map<String, Course[]> map) {
		Course[][] courses = new Course[unrelatedMajors.length][700];
		majorsWithCourses = new String[unrelatedMajors.length];
		String title = "";
		for (int i =0; i < unrelatedMajors.length; i++) {
			System.out.println(unrelatedMajors[i]);
			if (map.get(unrelatedMajors[i]).length > 0) {
				majorsWithCourses[i] = (String) unrelatedMajors[i];
			} else {
				majorsWithCourses[i] = null;
			}
			for (int j = 0; j < map.get(unrelatedMajors[i]).length; j++) {
				if (!title.equals(map.get(unrelatedMajors[i])[j].toString())) {
					courses[i][j] = map.get(unrelatedMajors[i])[j];
				}
				title = map.get(unrelatedMajors[i])[j].toString();
			}
		}
		System.out.println("");
		return courses;
	}
	
	public Course[][] breadthsForMajor(Map<String, Course[]> map) {
		Course[][] courses = new Course[unrelatedMajors.length][700];
		majorsWithCourses = new String[unrelatedMajors.length];
		String title = "";
		for (int i =0; i < unrelatedMajors.length; i++) {
			System.out.println(unrelatedMajors[i]);
			if (map.get(unrelatedMajors[i]).length > 0) {
				majorsWithCourses[i] = (String) unrelatedMajors[i];
			} else {
				majorsWithCourses[i] = null;
			}
			for (int j = 0; j < map.get(unrelatedMajors[i]).length; j++) {
				if (!title.equals(map.get(unrelatedMajors[i])[j].toString())) {
					courses[i][j] = map.get(unrelatedMajors[i])[j];
				}
				title = map.get(unrelatedMajors[i])[j].toString();
			}
		}
		System.out.println("");
		return courses;
	}	
	
	public static void unrelatedCourses(String major, int numMajors, double depth) {
		Map<String, Course[]> map = CoursesParser.parseCourses();
		Classes myClasses = new Classes(major);
		myClasses.addDepths(numMajors, depth);
		Course[][] unrelatedCourses = myClasses.coursesForMajor(map);
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < unrelatedCourses[i].length; j++) {
				if (unrelatedCourses[i][j] != null) {
					System.out.println(myClasses.unrelatedMajors[i]);
					System.out.println(unrelatedCourses[i][j] + ": " + unrelatedCourses[i][j].getSection());
					System.out.println("");
				}
			}
		}
	}
	
	public static void breadthCourses(String major, int numMajors, double depth) {
		Map<String, Course[]> map = CoursesParser.parseCourses();
		Classes myClasses = new Classes(major);
		myClasses.addDepths(numMajors, depth);
		Course[][] unrelatedBreadths = myClasses.breadthsForMajor(map);
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < unrelatedBreadths[i].length; j++) {
				if (unrelatedBreadths[i][j] != null) {
					System.out.println(myClasses.unrelatedMajors[i]);
					System.out.println(unrelatedBreadths[i][j] + ": " + unrelatedBreadths[i][j].getSection());
					System.out.println("");
				}
			}
		}
	}
	
	public static void main(String[] args) {
		unrelatedCourses("Computer Science", 5, 0.8);
	}
	
}
