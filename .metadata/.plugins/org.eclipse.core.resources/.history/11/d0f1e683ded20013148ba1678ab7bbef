import graph.*;

public class Mergesort {
	  /**
	   *  Mergesort algorithm.
	   *  @param a an array of int items.
	   **/
	  public static void mergeSort(VertexAndDepth[] a) {
	    VertexAndDepth[] tmpArray = new VertexAndDepth[a.length];

	    mergeSort(a, tmpArray, 0, a.length - 1);
	  }

	  /**
	   *  Internal method that makes recursive calls.
	   *  @param a an array of int items.
	   *  @param tmpArray an array to place the merged result.
	   *  @param left the left-most index of the subarray.
	   *  @param right the right-most index of the subarray.
	   **/
	  private static void mergeSort(VertexAndDepth[] a, VertexAndDepth[] tmpArray, int left, int right) {
	    if (left < right) {
	      int center = (left + right) / 2;
	      mergeSort(a, tmpArray, left, center);
	      mergeSort(a, tmpArray, center + 1, right);
	      merge(a, tmpArray, left, center + 1, right);
	    }
	  }

	  /**
	   *  Internal method that merges two sorted halves of a subarray.
	   *  @param a an array of int items.
	   *  @param tmpArray an array to place the merged result.
	   *  @param leftPos the left-most index of the subarray.
	   *  @param rightPos the index of the start of the second half.
	   *  @param rightEnd the right-most index of the subarray.
	   **/
	  private static void merge(VertexAndDepth[] a, VertexAndDepth[] tmpArray, int leftPos, int rightPos,
	                            int rightEnd) {
	    int leftEnd = rightPos - 1;
	    int tmpPos = leftPos;
	    int numElements = rightEnd - leftPos + 1;

	    // Main loop
	    while (leftPos <= leftEnd && rightPos <= rightEnd) {
	      if (a[leftPos].depth < a[rightPos].depth) {
	        tmpArray[tmpPos++] = a[leftPos++];
	      } else {
	        tmpArray[tmpPos++] = a[rightPos++];
	      }
	    }
	    while (leftPos <= leftEnd) {
	      tmpArray[tmpPos++] = a[leftPos++];
	    }
	    while(rightPos <= rightEnd) {
	      tmpArray[tmpPos++] = a[rightPos++];
	    }
	    // Copy TmpArray back
	    for (int i = 0; i < numElements; i++, rightEnd--) {
	      a[rightEnd] = tmpArray[rightEnd];
	    }
	  }
}
