package schedule;

import list.*;
import hashtable.*;

public class Graph {

  public DList vertexList;
  public HashTableChained edgeHash;

  public Graph() {
    vertexList = new DList();
    edgeHash = new HashTableChained();
  }

  public void insertVertex(String s) {
    vertexList.insertBack(s);
  }

  public void insertEdge(String s1, String s2, int weight) {
    edgeHash.insert(new VertexPair(s1, s2), weight);
  }

  public String toString() {
    int max = edgeHash.size();
    int itemNum;
    String output = "";
    DListNode currNode1 = vertexList.front();
    DListNode currNode2 = vertexList.front();
    try {
    while (currNode1.isValidNode()) {
      while (currNode2.isValidNode()) {
	Entry weight = edgeHash.find(new VertexPair(currNode1.item(), currNode2.item()));
	if (weight != null) {
	  output += currNode1.item() + ", "  + currNode2.item() + ": " + weight.value();
	}
	currNode2 = currNode2.next();
      }
      currNode1 = currNode1.next();
    }
    } catch (InvalidNodeException e) {
      System.out.println(e);
    }
    return output;
  }

}
